import os
import shutil
import sqlite3
import sys
import traceback
from csv import writer
from pathlib import Path
from sqlite3 import Error

import numpy as np
import pandas as pd
import plotly.graph_objects as go
from nicegui import app, ui
from plotly.subplots import make_subplots
from screeninfo import get_monitors

from helpers import *

#############################################################################

#
# Begin GUI
############################################################################
# HEADER
with ui.header().classes('bg-red-400 text-black font-black font-bold row items-center') as header:
    ui.button(on_click = lambda: left_drawer.toggle()).props('flat color=black icon=menu')
    ui.label('ACADEMIC SKILL PROGRESSIONS').classes('text-xl font-bold')
    with ui.row().classes('w-full no-wrap text-l font-bold'):
        with ui.tabs() as tabs:
            ui.tab('ABACUS SKILLS').classes('text-l font-bold')
            ui.tab('BRAILLE SKILLS').classes('text-l font-bold')
            ui.tab('BRAILLENOTE TOUCH SKILLS').classes('font-bold')
            ui.tab('iOS/iPadOS VOICEOVER SKILLS').classes('text-l font-bold')
            ui.tab('SCREENREADER SKILLS').classes('text-l font-bold')

## FOOTER
with ui.footer(value = True).classes('bg-indigo-500') as footer:
    with ui.row().classes('w-full no-wrap justify-center items-center text-l font-bold'):
        ui.label('Copyright Â© 2023 Michael Ryan Hunsaker, M.Ed., Ph.D.').classes('justify-center items-center')
    with ui.row().classes('w-full no-wrap justify-center items-centertext-l font-bold'):
        ui.link('Report Bugs or Request Features', 'mailto:hunsakerconsulting@gmail.com?subject=Academic%20Skills%20Progression%20App').classes('justify-center items-center')

# SIDEBAR
with ui.left_drawer(value = True).classes('bg-indigo-500') as left_drawer:
        ui.label('MATERIALS').classes('w-full no-wrap py-4 text-white font-bold text-xl justify-center items-center')
        ui.label('ABACUS').classes('w-full no-wrap py-4 font-bold text-white text-xl justify-center items-center')
        ui.button('Hadley Abacus Curriculum I', color = '#F98080', on_click = lambda: ui.download('instructionMaterials/Abacus1.pdf')).classes('text-left w-full align-left font-bold')
        ui.button('Hadley Abacus Curriculum II', color = '#F98080', on_click = lambda: ui.download('instructionMaterials/Abacus2.pdf')).classes('text-left w-full align-left bg-red-400 font-bold')
        ui.button('Abacus Made Easy', color = '#F98080', on_click = lambda: ui.download('instructionMaterials/AbacusMadeEasy.pdf')).classes('text-left w-full align-left font-bold font-bold')
        ui.button('Using the Cranmer Abacus', color = '#F98080', on_click = lambda: ui.download('instructionMaterials/UsingCramnerabacus')).classes('text-left w-full align-left bg-red-400 font-bold')
        ui.button('Japanese Abacus Use and Theory', color = '#F98080', on_click = lambda: ui.download('instructionMaterials/abacusUseTheory.pdf')).classes('text-left w-full align-left font-bold')
        ui.button('Advanced Japanese Abacus', color = '#F98080', on_click = lambda: ui.download('instructionMaterials/AdvancedAbacus.pdf')).classes('text-left w-full align-left bg-red-400 font-bold')
        ui.label('BRAILLE').classes('w-full no-wrap py-4 font-bold text-white text-xl justify-center items-center')
        ui.button('NLS-IMBT UEB Literary Braille', color = '#F98080', on_click = lambda: ui.download('instructionMaterials/')).classes('text-left w-full align-left font-bold')
        ui.button('UEB Australian Training Manual', color = '#F98080', on_click = lambda: ui.download('instructionMaterials/UEBAustrialianTrainingManual.pdf')).classes('text-left w-full align-left bg-red-400 font-bold')
        ui.button('UEB Technical Course', color = '#F98080', on_click = lambda: ui.download('instructionMaterials/UEBTechnicalCourse.pdf')).classes('text-left w-full align-left font-bold')
        ui.button('UEB Technical Guidelines', color = '#F98080', on_click = lambda: ui.download('instructionMaterials/UEBTechnicalGuidelines.pdf')).classes('text-left w-full align-left bg-red-400 font-bold')
        ui.button('UEB with Nemeth', color = '#F98080', on_click = lambda: ui.download('instructionMaterials/NemethUEBContext')).classes('text-left w-full align-left font-bold')
        ui.label('SCREENREADER').classes('w-full no-wrap py-4 font-bold text-white text-xl justify-center items-center')
        ui.button('NVDA Trainings', color = '#F98080', on_click = lambda: ui.download('instructionMaterials/NVDATrainings.pdf')).classes('text-left w-full align-left font-bold')
        ui.button('Windows Screen Reader Primer', color = '#F98080', on_click = lambda: ui.download('instructionMaterials/WindowsScreenreaderPrimer.pdf')).classes('text-left w-full align-left bg-red-400 font-bold')
        ui.button('Getting Started with Windows 11', color = '#F98080', on_click = lambda: ui.download('instructionMaterials/GettingStartedWindows11')).classes('text-left w-full align-left font-bold')
        ui.label('DATASHEETS').classes('w-full no-wrap py-4 content-center font-bold text-white text-xl')
        ui.button('Blank Vision Template', color = '#F98080', on_click = lambda: ui.download('datasheets/BlankVisionTemplate.pdf')).classes('text-left w-full align-left font-bold')
        ui.button('Generic Data Sheets', color = '#F98080', on_click = lambda: ui.download('datasheets/GenericDataSheets.pdf')).classes('text-left w-full align-left bg-red-400 font-bold')
        ui.button('Bi-Weekly Progress Monitoring', color = '#F98080', on_click = lambda: ui.download('datasheets/ProgressMonitoring.pdf')).classes('text-left w-full align-left font-bold')
        ui.label('ASSESSMENT FORMS').classes('w-full no-wrap py-4 font-bold text-white text-xl justify-center items-center')
        ui.button('Educational Vision Evaluation Forms', color = '#F98080', on_click = lambda: ui.download('visionAssessments/EducationVisionAssessments.pdf')).classes('text-left w-full align-left font-bold')

# Get Monitor Size to allow me to create the app to fill screen without setting fullscreen=True.
# 72 is subtracted from the height to accommodate the height of my Taskbar

for monitor in get_monitors():
    print(f'Screen Resolution = {str(monitor.width)}x{str(monitor.height)}')

ui.run(native = True, reload = False, dark = False, title = 'Academic Skills Progression', fullscreen = False, window_size = (monitor.width, monitor.height - 72))

